type User @model(subscriptions: null) @key(name: "ByEmail", fields: ["email"], queryField: "userByEmail") {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  avatar: String
  phoneNumber: String
  company: String
  companySize: String
  companyAddress1: String
  companyCity: String
  companyState: String
  companyPostalCode: String
  address1: String
  city: String
  state: String
  postalCode: String
  title: String
  conversations: [ConvoLink] @connection(keyName: "byConvoUser", fields: ["id"])
  messages: [Message] @connection(keyName: "byAuthor", fields: ["id"])
  sessions: [UserSessionReservation] @connection(keyName: "byUserSessionsReservs", fields: ["id"])
}

type Conversation @model(subscriptions: null) {
  id: ID!
  name: String!
  members: [String!]!
  messages: [Message] @connection(keyName: "byConversationByDate", fields: ["id"])
  associated: [ConvoLink] @connection(keyName: "byUserConvo", fields: ["id"])
}

type Session
  @model(subscriptions: null)
  # @key(name: "byActiveSession", fields: ["active", "id"])
  @key(name: "bySessionConversation", fields: ["conversationId", "id"], queryField: "sessionByConversationId") {
  id: ID!
  name: String!
  description: String
  # will still be true or false but Booleans are not indexable in dynamo
  active: String!
  conversationId: ID!
  conversation: Conversation @connection(fields: ["conversationId"])
  admins: [AdminUser] @connection(keyName: "byAdminSession", fields: ["id"])
  users: [UserSessionReservation] @connection(keyName: "byUserSessionsReservs", fields: ["id"])
  pinnedMessageId: ID!
  pinnedMessage: Message @connection(fields: ["pinnedMessageId"])
  raisedHands: [RaisedHand] @connection(keyName: "bySessionByDate", fields: ["id"])
  questions: [SessionQuestion] @connection(keyName: "bySessionQuestionByDate", fields: ["id"])
  polls: [SessionPoll] @connection(keyName: "bySessionPoll", fields: ["id"])
  pollAnswers: [SessionPollAnswer] @connection(keyName: "bySessionPollAnswer", fields: ["id"])
  qaActive: Boolean
  presenterPins: [String]
}

type UserSessionReservation
  @model(
    mutations: { create: "createSessionReservation", update: "updateSessionReservation" }
    queries: null
    subscriptions: null
  )
  @key(name: "bySessionUsersReservs", fields: ["userId", "sessionId"])
  @key(name: "byUserSessionsReservs", fields: ["sessionId", "userId"]) {
  id: ID!
  userId: ID!
  sessionId: ID!
  user: User! @connection(fields: ["userId"])
  session: Session! @connection(fields: ["sessionId"])
}

type Message
  @model(subscriptions: null, queries: null)
  @key(name: "byAuthor", fields: ["authorId", "id"], queryField: "messageByAuthor")
  @key(name: "byAuthorByDate", fields: ["authorId", "createdAt"], queryField: "messageByAuthorByDate")
  @key(name: "byConversation", fields: ["conversationId", "id"], queryField: "messageByConversation")
  @key(name: "byConversationByDate", fields: ["conversationId", "createdAt"], queryField: "messageByConversationDate") {
  id: ID!
  content: String!
  authorId: ID!
  conversationId: ID!
  # will still be true or false but Booleans are not indexable in dynamo
  deleted: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type SurveyQuestion @model(subscriptions: null) {
  id: ID!
  name: String!
}

type SurveyAnswer @model(subscriptions: null, queries: null) {
  id: ID!
  answer: String!
  userId: ID!
  questionId: ID!
  user: User! @connection(fields: ["userId"])
  question: SurveyQuestion! @connection(fields: ["questionId"])
}

type ConvoLink
  @model(mutations: { create: "createConvoLink", update: "updateConvoLink" }, queries: null, subscriptions: null)
  @key(name: "byConvoUser", fields: ["userId", "conversationId"])
  @key(name: "byUserConvo", fields: ["conversationId", "userId"]) {
  id: ID!
  userId: ID!
  conversationId: ID!
  user: User! @connection(fields: ["userId"])
  conversation: Conversation! @connection(fields: ["conversationId"])
}

enum AdminUserType {
  sme
  moderator
}

type AdminUser
  @model(mutations: { create: "createAdminLink", update: "updateAdminLink" }, queries: null, subscriptions: null)
  @key(name: "byAdminUser", fields: ["userId", "sessionId"])
  @key(name: "byAdminSession", fields: ["sessionId", "userId"]) {
  id: ID!
  userId: ID!
  sessionId: ID!
  userType: AdminUserType
  user: User! @connection(fields: ["userId"])
  session: Session! @connection(fields: ["sessionId"])
}

type PollAnswers
  @model(subscriptions: null, mutations: { create: "createPollAnswer" })
  @key(name: "byPoll", fields: ["pollId"], queryField: "answersByPoll") {
  id: ID!
  pollId: String!
  userId: String!
  answer: String!
}

type Notification @model(subscriptions: null, queries: null) {
  id: ID!
  type: String!
  body: String!
  button: String
  link: String
}

enum EventStage {
  REGISTRATION
  PRESHOW
  COUNTDOWN
  LIVESTREAM
  POSTSHOW
}

enum Environment {
  LOCAL
  DEV
  STAGING
  PROD
}

type EventConfig @model(queries: { list: null, get: "getEventConfig" }) {
  id: String
  name: String
  stage: EventStage
  streamStartTime: String
  useBackupStream: Boolean
  environment: Environment
}

type UserInteraction
  @model(
    queries: null
    subscriptions: null
    mutations: { create: "createUserInteraction", update: null, delete: null }
  ) {
  id: ID!
  trigger: String!
  type: String!
  name: String!
  userId: String!
}

type ContactRequest
  @model(
    queries: null
    subscriptions: null
    mutations: { create: "createContactRequest", update: null, delete: null }
  ) {
  id: ID!
  firstName: String!
  lastName: String!
  phoneNumber: String!
  email: String!
  message: String!
  demo: String
  userId: String!
}

type RaisedHand
  @model(
    mutations: { create: "createRaisedHand", update: "updateRaisedHand" }
    queries: { get: "getRaisedHand" }
    subscriptions: null
  )
  @key(name: "bySessionByDate", fields: ["sessionId", "createdAt"], queryField: "raisedHandByDate") {
  id: ID!
  userId: ID!
  sessionId: ID!
  user: User! @connection(fields: ["userId"])
  # will still be true or false but Booleans are not indexable in dynamo
  dismissed: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type SessionQuestion
  @model(mutations: { create: "createSessionQuestion", update: "updateSessionQuestion" }, subscriptions: null)
  @key(name: "bySessionQuestionByDate", fields: ["sessionId", "createdAt"], queryField: "questionByDate") {
  id: ID!
  userId: ID!
  sessionId: ID!
  user: User! @connection(fields: ["userId"])
  # will still be true or false but Booleans are not indexable in dynamo
  answered: String!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type SessionPoll
  @model(mutations: { create: "createSessionPoll", update: "updateSessionPoll" }, subscriptions: null)
  @key(name: "bySessionPoll", fields: ["sessionId"]) {
  id: ID!
  sessionId: ID!
  # will still be true or false but Booleans are not indexable in dynamo
  active: String!
  name: String!
  question: String!
  optionA: String
  optionB: String
  optionC: String
  optionD: String
  answer: AnswerOption!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum AnswerOption {
  optionA
  optionB
  optionC
  optionD
}

type SessionPollAnswer
  @model(mutations: { create: "createSessionPollAnswer", update: "updateSessionPollAnswer" })
  @key(name: "bySessionPollAnswer", fields: ["sessionId"]) {
  id: ID!
  sessionId: ID!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  answer: AnswerOption!
}

type Subscription {
  onCreateConvoLink(convoLinkUserId: ID!): ConvoLink @aws_subscribe(mutations: ["createConvoLink"])
  onCreateMessage(conversationId: ID!): Message @aws_subscribe(mutations: ["createMessage"])
  onUpdateMessage(conversationId: ID!): Message @aws_subscribe(mutations: ["updateMessage"])
  onCreateGlobalMessage: Message @aws_subscribe(mutations: ["createMessage"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onCreateNotification: Notification @aws_subscribe(mutations: ["createNotification"])
  onUpdateSession(id: ID!): Session @aws_subscribe(mutations: ["updateSession"])
  onUpdateSessionPoll(sessionId: ID!): SessionPoll @aws_subscribe(mutations: ["updateSessionPoll"])
  onUpdateSessionQuestion(sessionId: ID!): SessionQuestion @aws_subscribe(mutations: ["updateSessionQuestion"])
  onCreateRaisedHand(sessionId: ID!): RaisedHand @aws_subscribe(mutations: ["createRaisedHand"])
  onCreateGlobalRaisedHand: RaisedHand @aws_subscribe(mutations: ["createRaisedHand"])
}
